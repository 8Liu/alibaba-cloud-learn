package com.liudehuang.boot.security.jwttoken.model.domain;

import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Data
public class BaseUser implements UserDetails {
    /**
     *
     * @mbggenerated
     */
    private String id;

    /**
     *
     * @mbggenerated
     */
    private String userName;

    /**
     *
     * @mbggenerated
     */
    private String userPassword;

    /**
     *
     * @mbggenerated
     */
    private String nikeName;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column base_user.STATUS
     *
     * @mbggenerated
     */
    private Integer status;


    private List<BaseRole> roleList;

    private List<BaseMenu> menuList;

    public BaseUser(String id, String userName, String userPassword, String nikeName, Integer status, List<BaseRole> roleList, List<BaseMenu> menuList) {
        this.id = id;
        this.userName = userName;
        this.userPassword = userPassword;
        this.nikeName = nikeName;
        this.status = status;
        this.roleList = roleList;
        this.menuList = menuList;
    }

    public BaseUser() {
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        for(BaseRole role:roleList){
            authorities.add(new SimpleGrantedAuthority(role.getRoleName()));
        }
        for(BaseMenu menu:menuList){
            authorities.add(new SimpleGrantedAuthority(menu.getMenuUrl()));
        }
        return authorities;
    }

    @Override
    public String getPassword() {
        return userPassword;
    }

    @Override
    public String getUsername() {
        return userName;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}